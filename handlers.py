from aiogram import F, Router, types, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.types.callback_query import CallbackQuery
from states import InputUrlState, InputPasswordState, InputNewUser
from bs4 import BeautifulSoup
from db import UsersDataBase
import requests
import json
import sys
import io
import re
import config
import kb

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

router = Router()
bot = None
db = UsersDataBase()

def set_bot(instance: Bot):
    global bot
    bot = instance

def setup_handlers():
    @router.message(Command("start"))
    async def start_handler(msg: Message, state: FSMContext):
        global done_pass
        done_pass = await msg.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}.\n\nüî¢ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ‚¨áÔ∏è")
        await state.set_state(InputPasswordState.password)
        
@router.message(InputPasswordState.password)
async def check_password(msg: Message, state: FSMContext) -> None:
    await state.update_data(password=msg.text)
    await done_pass.delete()
    await msg.delete()
    data = await state.get_data()
    await state.clear()
    if data['password'] == config.password:
        await db.add_user(msg.from_user.id, msg.from_user.username)
        await msg.answer(text='‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –∫–∞–∫ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>.', parse_mode='HTML', 
                         reply_markup=kb.keyboard)
    else:
        await msg.answer(text='‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.')

        

# --============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================-- #

@router.callback_query(F.data == 'user_delete')
async def user_delete(clbck: CallbackQuery, state: FSMContext):
    global delete_msg
    delete_msg = clbck.message
    matches = re.findall(r'@([^ ]+)', clbck.message.text)
    name = matches[0]
    await update_entry(name=name)
    
@router.callback_query(F.data == 'edit_url')
async def edit_url(clbck: CallbackQuery, state: FSMContext):
    matches = re.findall(r'@([^ ]+)', clbck.message.text)
    name = matches[0]
    await state.set_state(InputUrlState.url)
    await state.update_data(name=name)
    global edit_msg
    edit_msg = await clbck.message.edit_text(text=f'‚úíÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ URL:\n(–í —Ñ–æ—Ä–º–∞—Ç–µ: https://www.example.com/)', reply_markup=kb.cancel_keyboard)
    
    
@router.message(InputUrlState.url)
async def edit_url_2(msg: Message, state: FSMContext) -> None:
    await state.update_data(url=msg.text)
    await msg.delete()
    data = await state.get_data()
    await state.clear()
    await update_entry(name=data['name'], new_url=data['url'])  
    
@router.callback_query(F.data == 'repeat_check')
async def repeat_check(clbck: CallbackQuery, state: FSMContext):
    dell = await clbck.message.edit_text(text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    response = await parsing()
    if response:
        await dell.delete()
        for item in response:
            name = item.get('name')
            url = item.get('url')
            
            await clbck.answer(text=f"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n" \
                                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{name} <a href=\"{url}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a> –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ!", 
                                                                            parse_mode='HTML', reply_markup=kb.bad_url)
    else:
        await dell.edit_text(text=f"‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è <b>–∞–∫—Ç–∏–≤–Ω—ã</b>.", parse_mode='HTML')


@router.callback_query(F.data == 'pass')
async def pass_button(clbck: CallbackQuery, state: FSMContext):
    await clbck.message.delete()


@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def add_user(msg: Message, state: FSMContext):
    await msg.delete()
    await state.set_state(InputNewUser.new_name)
    global add_msg
    add_msg = await msg.answer('‚úíÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ <b>"@"</b>', parse_mode='HTML', reply_markup=kb.cancel_keyboard)
    
@router.message(InputNewUser.new_name)
async def get_name(msg: Message, state: FSMContext):
    await state.update_data(new_name=msg.text)
    await add_msg.edit_text(text=f'üëæ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n<b>Username:</b> {msg.text}\n' \
        '<b>URL:</b> –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...', reply_markup=kb.cancel_keyboard)
    await msg.delete()
    await state.set_state(InputNewUser.new_url)
        
@router.message(InputNewUser.new_url)
async def get_name(msg: Message, state: FSMContext):
    await state.update_data(new_url=msg.text)
    await msg.delete()
    data = await state.get_data()
    await state.clear()
    new_entry = {"name": data['new_name'], "url": data['new_url']}

    await add_msg.edit_text(text=f'üëæ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n<b>Username:</b> {data["new_name"]}\n' \
        f'<b>URL:</b> <a href=\"{data["new_url"]}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>.\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...')

    response = await parsing([new_entry])
    if not response:
        
        with open('urls.json', 'r') as file:
            data_json = json.load(file)

        data_json["urls"].append(new_entry)

        with open('urls.json', 'w') as file:
            json.dump(data_json, file, indent=2)
        
        await add_msg.edit_text(text=f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.')
        
    else:
        await add_msg.edit_text(text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.')
    
    
@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(msg: Message, state: FSMContext):
    await msg.delete()
    start = await msg.answer('‚è≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...')
    
    with open('urls.json', 'r') as file:
        data = json.load(file)
    
    urls = data.get("urls", [])
    
    message = ''
    for url in urls:
        response = await parsing([url])
        if response:
            message += f'@{url["name"]} - <a href=\"{url["url"]}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a> –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚ùå\n'
        else:
            message += f'@{url["name"]} - <a href=\"{url["url"]}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a> –∞–∫—Ç–∏–≤–Ω–æ ‚úÖ\n'
    await start.edit_text(text=message)


@router.message(F.text.lower() == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
async def show_users(msg: Message):
    if msg:
        await msg.delete()
    start = await msg.answer("‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫...")
    with open('urls.json', 'r') as file:
        data = json.load(file)
    
    urls = data.get("urls", [])
        
    inline_keyboard = []

    buttons_per_row = 3
    current_row = []
    
    for url in urls:
        button_text = f'{url["name"]}'
        button_callback_data = f'show_user_{url["name"]}'
        current_row.append(InlineKeyboardButton(text=button_text, callback_data=button_callback_data))

        if len(current_row) == buttons_per_row:
            inline_keyboard.append(current_row)
            current_row = []

    if current_row:
        inline_keyboard.append(current_row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    
    global show_user_btn
    show_user_btn = await msg.answer("üëæ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=keyboard)
    await start.delete()

@router.callback_query(lambda c: c.data.startswith('show_user'))
async def show_user(clbck: CallbackQuery, state: FSMContext):
    button_text = next((button.text for row in clbck.message.reply_markup.inline_keyboard for button in row if button.callback_data == clbck.data), None)
    
    with open('urls.json', 'r') as file:
        data = json.load(file)

    urls = data.get("urls", [])

    for url in urls:
        if url["name"] == button_text:
            await show_user_btn.edit_text(text=f'üëæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{button_text} - <a href=\"{url["url"]}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>', 
                                          reply_markup=kb.users)
            return  
    
    
@router.callback_query(F.data == 'close')
async def back_button(clbck: CallbackQuery, state: FSMContext):
    await show_user_btn.delete()
    
@router.callback_query(F.data == 'cancel')
async def back_button(clbck: CallbackQuery, state: FSMContext):
    await clbck.message.delete()

    
# --===================== –§–£–ù–ö–¶–ò–ò =======================-- #

async def bad_urls(name, url):
    users = await db.get_all_users()
    for user in users:
        
        await bot.send_message(chat_id=user[0], text=f"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n" \
            f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{name} <a href=\"{url}\">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a> –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ!", 
            parse_mode='HTML', reply_markup=kb.bad_url)



# --============ –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò =======================-- #

async def update_entry(name, new_url=None):
    with open('urls.json', 'r') as file:
        data = json.load(file)

    urls = data.get("urls", [])

    for url in urls:
        if url.get("name") == name:
            if new_url:
                url["url"] = new_url
                await edit_msg.edit_text(text=f'‚úÖ –°—Å—ã–ª–∫–∞ @{name} –Ω–∞ <a href="{new_url}">–æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a> –∏–∑–º–µ–Ω–µ–Ω–∞.', parse_mode='HTML')
            else:
                urls = [url for url in urls if url.get("name") != name]
                await delete_msg.edit_text(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{name} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
            break

    else:
        if delete_msg:
            try:
                await delete_msg.edit_text(text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            except Exception:
                return
                    
            
    data["urls"] = urls

    with open('urls.json', 'w') as file:
        json.dump(data, file, indent=4)

async def parsing(data=None):
    
    try:
        standart_title = '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è OLX.ua:'
        resultat = []
        
        if not data:
            urls = get_urls()
        else:
            urls = data
        for item in urls:
            name = item.get('name')
            url = item.get('url')
            html = get_html(url)
            if html:
            
                html = BeautifulSoup(html, "html.parser")
                nofind = html.select('.c-wrapper > p')
                deleteurl = html.select('title')
                
                if nofind:
                    data = {
                            'name': name,
                            'url': url
                        }
                    resultat.append(data)
                elif deleteurl:
                    if standart_title in deleteurl[0].text:
                        data = {
                            'name': name,
                            'url': url
                        }
                        resultat.append(data)
                continue
                
            else:
                data = {
                            'name': name,
                            'url': url
                        }
                resultat.append(data)
        return resultat
    except Exception as e:
        
        data = {
                'name': name,
                'url': url
            }
        resultat.append(data)

        return resultat

def get_html(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.content
    else:
        return None

def get_urls():
    with open('urls.json', 'r') as file:
        data = json.load(file)
    urls_data = data.get('urls', [])
    return urls_data


__all__ = ["set_bot", "setup_handlers"]
